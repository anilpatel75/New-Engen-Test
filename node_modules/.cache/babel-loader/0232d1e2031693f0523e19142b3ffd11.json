{"ast":null,"code":"var _jsxFileName = \"/Users/anilpatel/Desktop/untitled folder/code-challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Maincontent from './Components/Maincontent';\nimport Footer from './Components/Footer';\nimport SelectedColor from './Components/SelectedColor';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nexport class App extends Component {\n  constructor(props) {\n    super(props); //  State for Storing Data for application level\n\n    this.generateRandomColor = () => {\n      let counter = 1;\n      let obj = {\n        id: null,\n        name: ''\n      };\n\n      for (let i = 0; i <= 7; i++) {\n        let array1 = [];\n\n        for (let j = 0; j < 14; j++) {\n          let data = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n          obj.id = counter;\n          obj.name = data;\n          array1.push(obj);\n          counter++;\n          obj = {\n            id: null,\n            name: ''\n          };\n        }\n\n        this.result.push(array1);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.setState({\n        colorList: [...this.result]\n      });\n      this.setState({\n        currentColor: this.result['0']\n      });\n    };\n\n    this.onButtonClick = ind => {\n      let data = this.state.colorList.filter((color, index) => {\n        if (ind === index) {\n          return color;\n        }\n      });\n      this.setState({\n        currentColor: data['0']\n      });\n    };\n\n    this.colorSelect = colorSelect => {\n      this.colorCount++;\n      this.setState({\n        selectColor: colorSelect\n      });\n      this.setState({\n        addedColor: [...this.state.addedColor, colorSelect]\n      });\n    };\n\n    this.onButtonClick = () => {\n      this.counter++;\n\n      if (this.counter < this.state.colorList.length) {\n        this.setState({\n          currentColor: [...this.state.currentColor, ...this.state.colorList[this.counter]]\n        });\n      }\n    };\n\n    this.onDeleteColor = deleteColor => {\n      this.setState({\n        addedColor: this.state.addedColor.filter(deleteData => {\n          if (deleteColor !== deleteData) {\n            return deleteData;\n          }\n        })\n      });\n      this.colorCount--;\n    };\n\n    this.SelectedColor = e => {\n      let obj = {\n        title: e,\n        data: this.state.addedColor\n      };\n      this.state.formState.push(obj);\n    };\n\n    this.state = {\n      colorList: [],\n      currentColor: [],\n      selectColor: {},\n      addedColor: [],\n      formState: []\n    };\n    this.result = [];\n    this.counter = 0; //counter for cart count\n\n    this.colorCount = 0; //Method for generating color\n\n    this.generateRandomColor();\n  } // method for generating the random color.\n\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Header, {\n      colorCount: this.colorCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12 col-sm-12 col-xs-12\",\n      style: mainContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/cart\",\n      render: props => React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(SelectedColor, Object.assign({}, props, {\n        selectColor: this.state.addedColor,\n        formState: this.state.formState,\n        onDeleteColor: this.onDeleteColor,\n        SelectedColor: this.SelectedColor,\n        onDeleteCurrentColor: this.onDeleteCurrentColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exect: true,\n      path: \"/\",\n      render: props => React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Maincontent, {\n        mainColorData: this.state.currentColor,\n        colorSelect: this.colorSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        onButtonClick: this.onButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })))))));\n  }\n\n}\nconst mainContent = {\n  display: \"flex\",\n  flexFlow: \"wrap\"\n};\nexport default App;","map":{"version":3,"sources":["/Users/anilpatel/Desktop/untitled folder/code-challenge/src/App.js"],"names":["React","Component","Header","Maincontent","Footer","SelectedColor","BrowserRouter","Router","Route","Switch","App","constructor","props","generateRandomColor","counter","obj","id","name","i","array1","j","data","Math","random","toString","push","result","componentDidMount","setState","colorList","currentColor","onButtonClick","ind","state","filter","color","index","colorSelect","colorCount","selectColor","addedColor","length","onDeleteColor","deleteColor","deleteData","e","title","formState","render","mainContent","onDeleteCurrentColor","display","flexFlow"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;AAEA,OAAO,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AACjCU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SAyBnBC,mBAzBmB,GAyBG,MAAM;AAC1B,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,GAAG,GAAG;AACRC,QAAAA,EAAE,EAAE,IADI;AAERC,QAAAA,IAAI,EAAE;AAFE,OAAV;;AAIA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,YAAIC,MAAM,GAAG,EAAb;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAIC,IAAI,GAAG,MAAM,CAACC,IAAI,CAACC,MAAL,KAAgB,QAAhB,IAA4B,CAA7B,EAAgCC,QAAhC,CAAyC,EAAzC,CAAjB;AACAT,UAAAA,GAAG,CAACC,EAAJ,GAASF,OAAT;AACAC,UAAAA,GAAG,CAACE,IAAJ,GAAWI,IAAX;AACAF,UAAAA,MAAM,CAACM,IAAP,CAAYV,GAAZ;AACAD,UAAAA,OAAO;AACPC,UAAAA,GAAG,GAAG;AACJC,YAAAA,EAAE,EAAE,IADA;AAEJC,YAAAA,IAAI,EAAE;AAFF,WAAN;AAID;;AACD,aAAKS,MAAL,CAAYD,IAAZ,CAAiBN,MAAjB;AACD;AAEF,KAhDkB;;AAAA,SAmDnBQ,iBAnDmB,GAmDC,MAAM;AACxB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,CAAC,GAAG,KAAKH,MAAT;AAAb,OAAd;AACA,WAAKE,QAAL,CAAc;AAAEE,QAAAA,YAAY,EAAE,KAAKJ,MAAL,CAAY,GAAZ;AAAhB,OAAd;AAED,KAvDkB;;AAAA,SAyDnBK,aAzDmB,GAyDFC,GAAD,IAAS;AACvB,UAAIX,IAAI,GAAG,KAAKY,KAAL,CAAWJ,SAAX,CAAqBK,MAArB,CAA4B,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACvD,YAAIJ,GAAG,KAAKI,KAAZ,EAAmB;AACjB,iBAAOD,KAAP;AACD;AACF,OAJU,CAAX;AAKA,WAAKP,QAAL,CAAc;AAAEE,QAAAA,YAAY,EAAET,IAAI,CAAC,GAAD;AAApB,OAAd;AACD,KAhEkB;;AAAA,SAkEnBgB,WAlEmB,GAkEJA,WAAD,IAAiB;AAC7B,WAAKC,UAAL;AACA,WAAKV,QAAL,CAAc;AAAEW,QAAAA,WAAW,EAAEF;AAAf,OAAd;AACA,WAAKT,QAAL,CAAc;AAAEY,QAAAA,UAAU,EAAE,CAAC,GAAG,KAAKP,KAAL,CAAWO,UAAf,EAA2BH,WAA3B;AAAd,OAAd;AACD,KAtEkB;;AAAA,SAwEnBN,aAxEmB,GAwEH,MAAM;AACpB,WAAKjB,OAAL;;AACA,UAAI,KAAKA,OAAL,GAAe,KAAKmB,KAAL,CAAWJ,SAAX,CAAqBY,MAAxC,EAAgD;AAC9C,aAAKb,QAAL,CAAc;AAAEE,UAAAA,YAAY,EAAE,CAAC,GAAG,KAAKG,KAAL,CAAWH,YAAf,EAA6B,GAAG,KAAKG,KAAL,CAAWJ,SAAX,CAAqB,KAAKf,OAA1B,CAAhC;AAAhB,SAAd;AACD;AAGF,KA/EkB;;AAAA,SAkFnB4B,aAlFmB,GAkFFC,WAAD,IAAiB;AAC/B,WAAKf,QAAL,CAAc;AACZY,QAAAA,UAAU,EAAE,KAAKP,KAAL,CAAWO,UAAX,CAAsBN,MAAtB,CAA8BU,UAAD,IAAgB;AACvD,cAAID,WAAW,KAAKC,UAApB,EAAgC;AAC9B,mBAAOA,UAAP;AACD;AACF,SAJW;AADA,OAAd;AAOA,WAAKN,UAAL;AACD,KA3FkB;;AAAA,SA8FnBjC,aA9FmB,GA8FFwC,CAAD,IAAO;AACrB,UAAI9B,GAAG,GAAG;AACR+B,QAAAA,KAAK,EAAED,CADC;AAERxB,QAAAA,IAAI,EAAE,KAAKY,KAAL,CAAWO;AAFT,OAAV;AAIA,WAAKP,KAAL,CAAWc,SAAX,CAAqBtB,IAArB,CAA0BV,GAA1B;AACD,KApGkB;;AAIjB,SAAKkB,KAAL,GAAa;AACXJ,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,YAAY,EAAE,EAFH;AAGXS,MAAAA,WAAW,EAAE,EAHF;AAIXC,MAAAA,UAAU,EAAE,EAJD;AAKXO,MAAAA,SAAS,EAAE;AALA,KAAb;AAQA,SAAKrB,MAAL,GAAc,EAAd;AACA,SAAKZ,OAAL,GAAe,CAAf,CAbiB,CAejB;;AACA,SAAKwB,UAAL,GAAkB,CAAlB,CAhBiB,CAkBjB;;AACA,SAAKzB,mBAAL;AACD,GArBgC,CAyBjC;;;AA8EAmC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,UAAU,EAAE,KAAKV,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAA+C,MAAA,KAAK,EAAEW,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,MAAM,EAAGrC,KAAD,IAC1B,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,aAAD,oBAAmBA,KAAnB;AAA0B,QAAA,WAAW,EAAE,KAAKqB,KAAL,CAAWO,UAAlD;AAA8D,QAAA,SAAS,EAAE,KAAKP,KAAL,CAAWc,SAApF;AAA+F,QAAA,aAAa,EAAE,KAAKL,aAAnH;AAAkI,QAAA,aAAa,EAAE,KAAKrC,aAAtJ;AAAqK,QAAA,oBAAoB,EAAE,KAAK6C,oBAAhM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAQE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,MAAM,EAAGtC,KAAD,IAC5B,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAa,QAAA,aAAa,EAAE,KAAKqB,KAAL,CAAWH,YAAvC;AAAqD,QAAA,WAAW,EAAE,KAAKO,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,aAAa,EAAE,KAAKN,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF,CADF,CADF,CAFF,CADF,CADF;AA4BD;;AApIgC;AAsInC,MAAMkB,WAAW,GAAG;AAClBE,EAAAA,OAAO,EAAE,MADS;AAElBC,EAAAA,QAAQ,EAAE;AAFQ,CAApB;AAMA,eAAe1C,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Maincontent from './Components/Maincontent';\nimport Footer from './Components/Footer';\nimport SelectedColor from './Components/SelectedColor';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    //  State for Storing Data for application level\n    this.state = {\n      colorList: [],\n      currentColor: [],\n      selectColor: {},\n      addedColor: [],\n      formState: [],\n\n    }\n    this.result = [];\n    this.counter = 0;\n\n    //counter for cart count\n    this.colorCount = 0;\n\n    //Method for generating color\n    this.generateRandomColor();\n  }\n\n\n\n  // method for generating the random color.\n  generateRandomColor = () => {\n    let counter = 1;\n    let obj = {\n      id: null,\n      name: ''\n    }\n    for (let i = 0; i <= 7; i++) {\n      let array1 = [];\n\n      for (let j = 0; j < 14; j++) {\n        let data = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n        obj.id = counter;\n        obj.name = data;\n        array1.push(obj);\n        counter++;\n        obj = {\n          id: null,\n          name: ''\n        }\n      }\n      this.result.push(array1)\n    }\n\n  }\n\n  // used for the component mounting\n  componentDidMount = () => {\n    this.setState({ colorList: [...this.result] })\n    this.setState({ currentColor: this.result['0'] })\n\n  }\n\n  onButtonClick = (ind) => {\n    let data = this.state.colorList.filter((color, index) => {\n      if (ind === index) {\n        return color;\n      }\n    })\n    this.setState({ currentColor: data['0'] });\n  }\n  //color selection\n  colorSelect = (colorSelect) => {\n    this.colorCount++;\n    this.setState({ selectColor: colorSelect });\n    this.setState({ addedColor: [...this.state.addedColor, colorSelect] });\n  }\n  // methos for loadMoreColor\n  onButtonClick = () => {\n    this.counter++;\n    if (this.counter < this.state.colorList.length) {\n      this.setState({ currentColor: [...this.state.currentColor, ...this.state.colorList[this.counter]] })\n    }\n\n\n  }\n\n  //Delete Color Fron Selected Component\n  onDeleteColor = (deleteColor) => {\n    this.setState({\n      addedColor: this.state.addedColor.filter((deleteData) => {\n        if (deleteColor !== deleteData) {\n          return deleteData\n        }\n      })\n    })\n    this.colorCount--;\n  }\n\n  // submit \n  SelectedColor = (e) => {\n    let obj = {\n      title: e,\n      data: this.state.addedColor\n    }\n    this.state.formState.push(obj);\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header colorCount={this.colorCount} />\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-12 col-sm-12 col-xs-12\" style={mainContent}>\n                <Switch>\n\n                  <Route path=\"/cart\" render={(props) => (\n                    <React.Fragment>\n                      <SelectedColor {...props} selectColor={this.state.addedColor} formState={this.state.formState} onDeleteColor={this.onDeleteColor} SelectedColor={this.SelectedColor} onDeleteCurrentColor={this.onDeleteCurrentColor} />\n                    </React.Fragment>\n                  )} />\n\n                  <Route exect path=\"/\" render={(props) => (\n                    <React.Fragment>\n                      <Maincontent mainColorData={this.state.currentColor} colorSelect={this.colorSelect} />\n                      <Footer onButtonClick={this.onButtonClick} />\n                    </React.Fragment>\n                  )} />\n                </Switch>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\nconst mainContent = {\n  display: \"flex\",\n  flexFlow: \"wrap\"\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}