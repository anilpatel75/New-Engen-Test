{"ast":null,"code":"var _jsxFileName = \"/Users/anilpatel/Desktop/React/reactexample/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Maincontent from './Components/Maincontent';\nimport Footer from './Components/Footer';\nimport SelectedColor from './Components/SelectedColor';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nexport class App extends Component {\n  constructor(props) {\n    super(props); //   State for Storing Data  for application level\n\n    this.generateRandomColor = () => {\n      let counter = 1;\n      let obj = {\n        id: null,\n        name: ''\n      };\n\n      for (let i = 0; i <= 7; i++) {\n        let array1 = [];\n\n        for (let j = 0; j < 14; j++) {\n          let data = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);\n          obj.id = counter;\n          obj.name = data;\n          array1.push(obj);\n          counter++;\n          obj = {\n            id: null,\n            name: ''\n          };\n        }\n\n        this.result.push(array1);\n      }\n    };\n\n    this.componentDidMount = () => {\n      this.setState({\n        colorList: [...this.result]\n      });\n      this.setState({\n        currentColor: this.result['0']\n      });\n    };\n\n    this.onButtonClick = ind => {\n      console.log();\n      let data = this.state.colorList.filter((color, index) => {\n        if (ind == index) {\n          return color;\n        }\n      });\n      this.setState({\n        currentColor: data['0']\n      });\n    };\n\n    this.colorSelect = colorSelect => {\n      this.colorCount++;\n      this.setState({\n        selectColor: colorSelect\n      });\n      this.setState({\n        addedColor: [...this.state.addedColor, colorSelect]\n      });\n      console.log(this.state.addedColor);\n    };\n\n    this.onButtonClick = () => {\n      this.counter++;\n\n      if (this.counter < this.state.colorList.length) {}\n\n      this.setState({\n        currentColor: [...this.state.currentColor, ...this.state.colorList[this.counter]]\n      });\n    };\n\n    this.onDeleteColor = deleteColor => {\n      this.setState({\n        addedColor: this.state.addedColor.filter(deleteData => {\n          if (deleteColor !== deleteData) {\n            return deleteData;\n          }\n        })\n      });\n      this.colorCount--;\n    };\n\n    this.state = {\n      colorList: [],\n      currentColor: [],\n      selectColor: {},\n      addedColor: []\n    };\n    this.result = [];\n    this.counter = 0; //counter for cart count\n\n    this.colorCount = 0; //Method for generating color\n\n    this.generateRandomColor();\n  } // method for generating the random number of diffrent color\n\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Header, {\n      colorCount: this.colorCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12\",\n      style: mainContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/cart\",\n      render: props => React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(SelectedColor, Object.assign({}, props, {\n        selectColor: this.state.addedColor,\n        onDeleteColor: this.onDeleteColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exect: true,\n      path: \"/\",\n      render: props => React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Maincontent, {\n        mainColorData: this.state.currentColor,\n        colorSelect: this.colorSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        onButtonClick: this.onButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })))))));\n  }\n\n}\nconst mainContent = {\n  display: \"flex\",\n  flexFlow: \"wrap\"\n};\nexport default App;","map":{"version":3,"sources":["/Users/anilpatel/Desktop/React/reactexample/src/App.js"],"names":["React","Component","Header","Maincontent","Footer","SelectedColor","BrowserRouter","Router","Route","Switch","App","constructor","props","generateRandomColor","counter","obj","id","name","i","array1","j","data","Math","random","toString","push","result","componentDidMount","setState","colorList","currentColor","onButtonClick","ind","console","log","state","filter","color","index","colorSelect","colorCount","selectColor","addedColor","length","onDeleteColor","deleteColor","deleteData","render","mainContent","display","flexFlow"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Maincontent from './Components/Maincontent';\nimport Footer from './Components/Footer';\nimport SelectedColor from './Components/SelectedColor';\nimport {BrowserRouter as Router, Route,Switch} from 'react-router-dom';\n\n export class App extends Component {\n  constructor(props) {\n    super(props);\n       \n//   State for Storing Data  for application level\n    this.state = {\n       colorList:[],\n       currentColor:[],\n       selectColor:{},\n      addedColor :[]\n    }\n     this.result = [];\n     this.counter = 0;\n     //counter for cart count\n     this.colorCount =0; \n     //Method for generating color\n    this.generateRandomColor();\n  }\n\n\n \n// method for generating the random number of diffrent color\ngenerateRandomColor = () => {\n  let  counter = 1;\n      let obj ={\n               id:null,\n                name:''\n               }\n    for(let i= 0; i<=7; i++) {\n     let array1 =[];\n   \n     for(let j= 0;j<14; j++) {\n        let data ='#'+(Math.random()*0xFFFFFF<<0).toString(16);\n        obj.id  = counter;\n        obj.name = data;\n        array1.push(obj);\n        counter++;\n        obj = {\n        id:null,\n          name:''\n      }\n  }\n  this.result.push(array1)\n }\n\n}\n\n// used for the component mounting\ncomponentDidMount = () => {\n  this.setState({colorList:[...this.result]})\n  this.setState({currentColor:this.result['0']})\n \n}\n\n     onButtonClick = (ind) => {\n       console.log()\n    let data = this.state.colorList.filter((color,index) =>{\n        if(ind == index) {\n        return color;\n        }\n     })\n      this.setState({currentColor:data['0']});\n    } \n\n    colorSelect = (colorSelect) => {\n        this.colorCount++;\n        this.setState({selectColor:colorSelect});\n         this.setState({addedColor:[...this.state.addedColor,colorSelect]});\n         console.log(this.state.addedColor);\n    }\n\n     onButtonClick = () => {\n     \n       this.counter++;\n        if(this.counter < this.state.colorList.length){}\n        this.setState({currentColor:[...this.state.currentColor,...this.state.colorList[this.counter]]})\n       \n    }\n\n    //Delete\n    onDeleteColor = (deleteColor) => {\n      this.setState({addedColor: this.state.addedColor.filter((deleteData) => {\n         if(deleteColor !== deleteData) {\n           return deleteData\n         }\n      })})\n      this.colorCount--;\n    }\n\n\nrender() {\n  return (\n    <Router>\n     <div className=\"App\">\n     <Header   colorCount ={this.colorCount} />\n     <div className=\"container-fluid\">\n      <div className=\"row\">\n       <div className=\"col-md-12\" style={mainContent}>\n     <Switch>\n       <Route   path=\"/cart\" render={(props) =>(\n         <React.Fragment>\n       <SelectedColor {...props} selectColor ={this.state.addedColor} onDeleteColor={this.onDeleteColor} /> \n      \n       </React.Fragment>\n       )} />\n      <Route  exect path=\"/\" render={(props) => (\n         <React.Fragment>\n           <Maincontent  mainColorData = {this.state.currentColor} colorSelect = {this.colorSelect}/>\n           <Footer  onButtonClick = {this.onButtonClick} />\n           </React.Fragment>\n       )} />\n  \n      \n        \n     \n    \n     \n     </Switch>\n      \n      \n      \n     \n     \n      </div>\n     \n    </div>\n     </div>\n  \n    \n    </div>\n    </Router>\n  );\n}\n }\n const  mainContent = {\n   display:\"flex\",\n   flexFlow:\"wrap\"\n }\n \n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}